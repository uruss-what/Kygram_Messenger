// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: key_exchange.proto

package protopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeyExchangeService_SendPublicKey_FullMethodName = "/keyexchange.KeyExchangeService/SendPublicKey"
	KeyExchangeService_ExchangeKeys_FullMethodName  = "/keyexchange.KeyExchangeService/ExchangeKeys"
)

// KeyExchangeServiceClient is the client API for KeyExchangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyExchangeServiceClient interface {
	SendPublicKey(ctx context.Context, in *SendPublicKeyRequest, opts ...grpc.CallOption) (*SendPublicKeyResponse, error)
	ExchangeKeys(ctx context.Context, in *KeyExchangeRequest, opts ...grpc.CallOption) (*KeyExchangeResponse, error)
}

type keyExchangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyExchangeServiceClient(cc grpc.ClientConnInterface) KeyExchangeServiceClient {
	return &keyExchangeServiceClient{cc}
}

func (c *keyExchangeServiceClient) SendPublicKey(ctx context.Context, in *SendPublicKeyRequest, opts ...grpc.CallOption) (*SendPublicKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPublicKeyResponse)
	err := c.cc.Invoke(ctx, KeyExchangeService_SendPublicKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyExchangeServiceClient) ExchangeKeys(ctx context.Context, in *KeyExchangeRequest, opts ...grpc.CallOption) (*KeyExchangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeyExchangeResponse)
	err := c.cc.Invoke(ctx, KeyExchangeService_ExchangeKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyExchangeServiceServer is the server API for KeyExchangeService service.
// All implementations must embed UnimplementedKeyExchangeServiceServer
// for forward compatibility.
type KeyExchangeServiceServer interface {
	SendPublicKey(context.Context, *SendPublicKeyRequest) (*SendPublicKeyResponse, error)
	ExchangeKeys(context.Context, *KeyExchangeRequest) (*KeyExchangeResponse, error)
	mustEmbedUnimplementedKeyExchangeServiceServer()
}

// UnimplementedKeyExchangeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyExchangeServiceServer struct{}

func (UnimplementedKeyExchangeServiceServer) SendPublicKey(context.Context, *SendPublicKeyRequest) (*SendPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPublicKey not implemented")
}
func (UnimplementedKeyExchangeServiceServer) ExchangeKeys(context.Context, *KeyExchangeRequest) (*KeyExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeKeys not implemented")
}
func (UnimplementedKeyExchangeServiceServer) mustEmbedUnimplementedKeyExchangeServiceServer() {}
func (UnimplementedKeyExchangeServiceServer) testEmbeddedByValue()                            {}

// UnsafeKeyExchangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyExchangeServiceServer will
// result in compilation errors.
type UnsafeKeyExchangeServiceServer interface {
	mustEmbedUnimplementedKeyExchangeServiceServer()
}

func RegisterKeyExchangeServiceServer(s grpc.ServiceRegistrar, srv KeyExchangeServiceServer) {
	// If the following call pancis, it indicates UnimplementedKeyExchangeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeyExchangeService_ServiceDesc, srv)
}

func _KeyExchangeService_SendPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyExchangeServiceServer).SendPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyExchangeService_SendPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyExchangeServiceServer).SendPublicKey(ctx, req.(*SendPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyExchangeService_ExchangeKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyExchangeServiceServer).ExchangeKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyExchangeService_ExchangeKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyExchangeServiceServer).ExchangeKeys(ctx, req.(*KeyExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyExchangeService_ServiceDesc is the grpc.ServiceDesc for KeyExchangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyExchangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keyexchange.KeyExchangeService",
	HandlerType: (*KeyExchangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPublicKey",
			Handler:    _KeyExchangeService_SendPublicKey_Handler,
		},
		{
			MethodName: "ExchangeKeys",
			Handler:    _KeyExchangeService_ExchangeKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "key_exchange.proto",
}
